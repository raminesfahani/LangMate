using LangMate.Abstractions.Dto;
using LangMate.Abstractions.Options;
using Microsoft.Extensions.AI;
using Microsoft.VisualBasic.FileIO;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LangMate.Abstractions.Contracts
{
    public interface IAIClient
    {
        /// <summary>
        /// Initializes the provider and prepares it for use.
        /// </summary>
        /// <remarks>This method must be called before using the component. It performs any necessary
        /// setup  or resource allocation required for the component to function correctly.</remarks>
        /// <returns>A task that represents the asynchronous initialization operation.</returns>
        Task Initialize();

        /// <summary>
        /// Generates a full AI response based on the prompt and options provided.
        /// </summary>
        /// <param name="prompt">The input prompt to send to the AI model.</param>
        /// <param name="options">AI configuration like model, temperature, language, etc.</param>
        /// <param name="ct">Optional cancellation token.</param>
        /// <returns>A rich AIResponse object containing text and metadata.</returns>
        Task<AIResponse?> GenerateCompletionAsync(string prompt, AIOptions options, ChatRole chatRole, bool newConversation = false, CancellationToken ct = default);

        /// <summary>
        /// Streams the response content as it is generated by the AI model (if supported).
        /// </summary>
        /// <param name="prompt">The input prompt to stream response for.</param>
        /// <param name="options">AI configuration like model, temperature, language, etc.</param>
        /// <param name="ct">Optional cancellation token.</param>
        /// <returns>An async stream of response text chunks.</returns>
        IAsyncEnumerable<AIResponseChunk?> GenerateStreamCompletionAsync(string prompt, AIOptions options, ChatRole chatRole, bool newConversation = false, CancellationToken ct = default);

        /// <summary>
        /// Get list of available models from the AI provider.
        /// </summary>
        /// <returns></returns>
        List<string> GetAvailableModels();
        List<ChatMessage> GetChatHistory();
    }
}
